---
title: "Tables manipulation II"
categories: [Tables, tibbles, dplyr, SQL, Relational Algebra, nycflights13]

execute:
  echo: true
  eval: true
  collapse: true

format:
  html:
    output-file: lab-tables.html
  pdf:
    output-file: lab-tables.pdf

# params:
#   truc: html
#   year: 2024 
#   curriculum: "M1 MIDS/MFA"
#   university: "Université Paris Cité"
#   homepage: "https://stephane-v-boucheron.fr/courses/scidon"
#   moodle: "https://moodle.u-paris.fr/course/view.php?id=6143"
  
engine: knitr
---



{{< include _preamble.qmd >}}


::: {.callout-important}

### Objectives


:::



## Setup

We will use the following packages. If needed, we install them. 
```{r}
#| label: setup-packages
#| message: false
#| warning: false
#| include: false
stopifnot(
  require(lobstr),
  require(ggforce),
  require(nycflights13),
  require(patchwork), 
  require(glue),
  require(DT), 
  require(viridis),
  require(sqldf), 
  require(dbplyr),
  require(dtplyr),
  require(tidyverse),
  require(DBI),
  require(RSQLite)
)


```


```{r}
old_theme <- theme_set(theme_minimal())
```

Check [nycflights13](https://nycflights13.tidyverse.org) for any explanation concerning the tables and their columns. 

## Data loading 



```{r}
flights <- nycflights13::flights
weather <- nycflights13::weather
airports <- nycflights13::airports
airlines <- nycflights13::airlines
planes <- nycflights13::planes
```

```{r}
#| eval: true
con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
flights_lite <- copy_to(con, nycflights13::flights)
airports_lite <- copy_to(con, nycflights13::airports)
planes_lite <-  copy_to(con, nycflights13::planes)
weather_lite <- copy_to(con, nycflights13::weather)
airlines_lite <- copy_to(con, nycflights13::airlines)
```

```{r}
flights_lite |>
  select(contains("delay")) |>
  show_query()
```


View data in spreadsheet style.

```{r}
#| eval: false
View(flights)
```


Ask for help about table `flights`

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
?flights
```

```{r}
flights |> 
  glimpse()
```

```{r}
airports |> 
  glimpse()
```

:::

:::

## First Queries (the `dplyr` way)

Find all flights that

- Had an arrival delay of two or more hours

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  filter(arr_delay >= 120) |> 
  nrow()
```

```{r}
flights_lite |> 
  filter(arr_delay >= 120) |> 
  count()  |> 
  show_query()
```

:::

::: {.callout-note title="Solution"}

We can translate the `dplyr` pipeline into an `SQL` query.

```{r}
flights_lite |> 
  filter(arr_delay >= 120) |> 
  show_query()
```

We can even get some explanations

```{.r}
flights_lite |> 
  filter(arr_delay >= 120) |> 
  explain()
```

:::

:::



- Flew to Houston (`IAH` or `HOU`)

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  filter(dest %in% c("HOU", "IAH")) |>  
  nrow()

flights |> 
  filter(dest == "HOU" | dest == "IAH") |> 
  count()
```

:::

:::


::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}

flights_lite |> 
  filter(dest %in% c("HOU", "IAH")) |>  
  show_query()
```

:::

:::

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}

flights_lite |> 
  filter(dest == "HOU" | dest == "IAH") |> 
  show_query()
```

:::

:::


- Were operated by United, American, or Delta

::: {.callout-tip}
Package `stringr` could be useful.

```{r}
airlines |> 
  filter(stringr::str_starts(name, "United") |
        stringr::str_starts(name, "American") |
        stringr::str_starts(name, "Delta"))

airlines |> 
  filter(stringr::str_detect(name, ("United|American|Delta"))) |> 
  pull(carrier)
```

```{.r}
#| eval: false
airlines_lite |> 
  filter(stringr::str_starts(name, "United") |
        stringr::str_starts(name, "American") |
        stringr::str_starts(name, "Delta")) |> 
  show_query()
```

```{.sql}
SELECT *
FROM `nycflights13::airlines`
WHERE "name" LIKE 'United%' OR 
      "name" LIKE 'American%' OR 
      "name" LIKE 'Delta%' ;
```

[`stringr` is part of tidyverse](https://stringr.tidyverse.org)

:::

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

We build on the tip above to extract the matching airlines codes. 

We may proceed using a  *subquery*

```{r}
flights |> 
  filter(carrier %in% (
        airlines |> 
        filter(stringr::str_detect(name, ("United|American|Delta"))) |> 
        pluck("carrier")
      )
) |> 
head(6)
```

```{r}
flights_lite |> 
  filter(carrier %in% c("AA", "DL", "UA")) |> 
  show_query()
```

```{.sql}
SELECT *
FROM `nycflights13::flights`
WHERE carrier IN (SELECT carrier 
  FROM `nycflights13::airlines`
  WHERE "name" LIKE 'United%' OR 
        "name" LIKE 'American%' OR 
        "name" LIKE 'Delta%')
) ; 
```
We may also rely on a `NATURAL JOIN`.

```{r}
airlines |> 
  filter(str_detect(name, "United|Delta|American")) |> 
  inner_join(flights) |> 
  head(6)
#  sample_n(size=6)    # random sampling 
```


```{.r}
#| eval: false
airlines_lite |> 
  filter(stringr::str_starts(name, "United") |
        stringr::str_starts(name, "American") |
        stringr::str_starts(name, "Delta")) |> 
  inner_join(flights_lite) |> 
  show_query()
```
:::

:::


- Departed in summer (July, August, and September)

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  filter(month %in% c(7,8,9)) |> 
  count()
```


A more ambitious (and sustainable) approach relies on the date/time manipulation function from `lubridate`

```{r}
flights |> 
  filter(lubridate::month(time_hour) %in% 7:9) |> 
  head()
```

or even 

```{r}
my_locale <- 'en_US.UTF-8'

flights |> 
  filter(lubridate::month(time_hour, label=T, abbr=F, 
                          locale=my_locale) %in% 
                    c('juillet', 'August', 'September')) |> 
  head()
```

:::

:::


::: {.callout-important}

When manipulating temporal information (date, time, duration), keep an eye on [what `lubridate` offers](https://lubridate.tidyverse.org). The API closely parallels what RDMS and Python offer. 

:::

- Arrived more than two hours late, but didn’t leave late

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  filter(arr_delay >= 120, dep_delay <= 0) |> 
  count()
```

:::

:::


- Were delayed by at least an hour, but made up over 30 minutes in flight

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  filter(dep_delay > 60, 
         arr_delay < dep_delay -30) |> 
  count()
```

:::

:::


- Departed between midnight and 6am (inclusive)

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  filter(dep_time<=600, dep_time>0) |> 
  head()
```


```{r}
flights |> 
  filter(lubridate::hour(time_hour)<=5  | (
         lubridate::hour(time_hour)==6 & minute(time_hour)==0)) |> 
  head()
```
:::

:::

::: {.callout-important}

Read [`filter()` in R for Data Science 1st Ed](https://r4ds.had.co.nz/transform.html#filter-rows-with-filter)

Read [Chapter Transform in  R for Data Science 2nd Ed](https://r4ds.hadley.nz/data-transform)

:::

## Missing data

- How many flights  per `origin` have a missing `dep_time`? 

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  filter(is.na(dep_time)) |> 
  count(by=origin)
```

```{r}
flights_lite |> 
  filter(is.na(dep_time)) |> 
  count(by=origin) |> 
  show_query()
```

Not far from a spontaneous answer! We could obtain the latter anyway.

```{r}
flights_lite |> 
  filter(is.na(dep_time)) |> 
  group_by(origin) |> 
  summarise(n=n()) |> 
  show_query()
```

Note that combining `dplyr` verbs and pipes (`|>` or `|>`) provides a much 
more readable and modular approach than vanilla `SQL`. 

- Using `dplyr`  and pipe, the order in which operation are executed is clear and obvious. In SQL, it is counterintuitive.
-  

:::

:::


::: {.content-visible when-profile="solution"} 

In table `flights`, 8255 (`nrow(filter(flights, is.na(dep_time)))`) rows have a missing `dep_time` field. 

:::

- What other variables are missing? 


::: {.callout-important}

The introduction to [`tidyselect`](https://tidyselect.r-lib.org) is a must read. 

:::


::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  filter(is.na(dep_time)) |> 
  summarize(across(everything(), ~ all(is.na(.)))) |> 
  pivot_longer(cols = everything()) |> 
  filter(value) |> 
  select(name)
```




```{r}
flights_lite |> 
  filter(is.na(dep_time)) |> 
  show_query()
```

:::

:::

- What might these rows with missing data represent?

::: {.content-visible when-profile="solution"} 

All the information you can only get if the flight did take off. 

:::


```{r}
not_cancelled <-  flights |> 
  filter(!is.na(dep_time))
```

<br> 


- More questions: for each column in `flight` report the number of missing values. 

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  summarise(across(everything(), ~  sum(is.na(.)))) |> 
  pivot_longer(cols = everything()) |> 
  filter(value > 0) |> 
  arrange(desc(value))
```

:::

:::


::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}


```{r}
flights |> 
  skimr::skim()
```

:::

:::

## Arrange

- How could you use `arrange()` to sort all missing values to the start? (Hint: use `is.na()`).

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
#| echo: false
```

:::

:::


- Sort flights to find the most delayed flights. 

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  arrange(desc(dep_delay)) |> 
  select(dep_delay, arr_delay, everything())
```

:::

:::


```{r}

```

- Pick the ten most delayed flights (with finite `dep_delay`)

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  slice_max(order_by=dep_delay, n = 10, na_rm = T)
```

:::

:::

- Find the flights that left earliest.

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  arrange(dep_time) |> 
  select(dest, origin, dep_time)
```

:::

:::

- Sort flights to find the fastest (highest speed) flights.

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  filter(!is.na(air_time)) |> 
  mutate(speed = distance/air_time) |> 
  arrange(desc(speed)) |> 
  select(speed, distance, air_time, origin, dest, everything())
```


This is an overkill. We are sorting in order to perform maximum selection. 
Recall that sorting requires more comparisons than selection. The comparison 
between sorting and selecting with respect to data shuffling is even less favourable.

```{r}
flights |> 
  filter(!is.na(air_time)) |> 
  mutate(speed = distance/air_time) |>
  slice_max(n=10, speed) |>
  select(speed, distance, air_time, origin, dest, everything())
```
:::

:::

- Which flights travelled the farthest? 


::: {.callout-note collapse="true"}

The database provides all we need with columns `distance` and `air_time`.  Otherwise, with the positions of airports from table `airports`, we should be able  to compute distances using : 

> ‘Haversine’ formula.

[https://en.wikipedia.org/wiki/Haversine_formula](https://en.wikipedia.org/wiki/Haversine_formula)

:::


::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  arrange(desc(distance)) |> 
  distinct(distance, dest, origin)
```

:::

:::

- Which travelled the shortest?

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  arrange(distance) |> 
  select(distance, dest, origin, everything())
```

Avoid an overkill ...

```{r}
flights |>
  distinct(distance, origin, dest) |> 
  slice_min(distance, n=10)
```

:::

:::


## Projection

- Brainstorm as many ways as possible to select `dep_time`, `dep_delay`, `arr_time`, and `arr_delay` from `flights.`


::: {.content-visible when-profile="solution"} 

::: {.callout-note  title="Solution"}

```{r}
flights |> 
  select(dep_time, dep_delay, arr_time, arr_delay) |> 
  head()
```

:::

::: {.callout-note  title="Solution"}

```{r}
flights |> 
  select(starts_with("dep"), starts_with("arr")) |>  
  head()
```

:::

::: {.callout-note  title="Solution"}

```{r}
flights |> 
  select(starts_with("dep_") | starts_with("arr")) |> 
  head()
```
:::

:::

- What happens if you include the name of a variable multiple times in a `select()` call?

::: {.content-visible when-profile="solution"} 

::: {.callout-note  title="Solution"}

It is included once in the result. 

```{r}
flights |> 
  select(arr_time, starts_with("dep_") | starts_with("arr"), arr_time) |> 
  head()
```

:::

:::

- What does the `any_of()` function do? Why might it be helpful in conjunction with this vector?
 
 `vars <- c("year", "month", "day", "dep_delay", "arr_delay")`
 
 

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
vars <- c("year", "month", "day", "dep_delay", "arr_delay")

flights |> 
  filter(across(any_of(vars), is.numeric))
```


```{r}
flights |> 
  filter(if_any(vars, \(x) x<0)) |> 
  relocate(ends_with('delay')) |> 
  head()
```
:::

:::

- Does the result of running the following code surprise you? 

```{r}
#| eval: true
select(
  flights, 
  contains("TIME", ignore.case =TRUE))  |> 
  head()
```

::: {.content-visible when-profile="solution"} 

:::

- How do the select helpers deal with case by default? 

::: {.content-visible when-profile="solution"} 

::: {.callout-note title="Solution"}

By default, `select` helpers ignore case. 
This complies with a similar behavior in RDBMS 

:::

:::

- How can you change that default?

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
select(flights, 
  contains("TIME", ignore.case=FALSE))  |> 
  head()
```

:::

:::


## Mutations


- Currently `dep_time` and `sched_dep_time` are convenient to look at, but hard to compute with because they’re not really continuous numbers. Convert them to a more convenient representation of number of minutes since midnight.

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  mutate(across(ends_with('dep_time') | ends_with('arr_time'), 
                (\(x) 60L * (x %/% 100L) + (x %% 100L)),
                .names="cor_{.col}")) |>
  select(ends_with('dep_time'), ends_with('arr_time'), everything())

df <- flights |> 
  mutate(across(ends_with('dep_time') | ends_with('arr_time'), 
                (\(x) 60L * (x %/% 100L) + (x %% 100L)),
                .names="{.col}"))
```

:::

:::

- Compare `air_time` with `arr_time - dep_time`. What do you expect to see? What do you see? What do you need to do to fix it?

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
df |> 
  mutate(est_arr_time = (dep_time + air_time) %% 1440) |> 
  filter(abs(est_arr_time - arr_time)<1000) |> 
  arrange(desc(abs(est_arr_time - arr_time))) |> 
  select(dest, arr_time, est_arr_time, ends_with("time"), everything())
```

:::

:::

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}

df |> 
  mutate(est_arr_time = (dep_time + air_time) %% 1440) |> 
  filter(!is.na(arr_time), !is.na(est_arr_time)) |> 
  ggplot() +
  aes(x = arr_time, y = est_arr_time) +
  geom_point(alpha=.1, size=.1)
```

:::

:::


::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
df |> 
  mutate(est_arr_time = (dep_time + air_time) %% 1440) |> 
  filter(!is.na(arr_time), !is.na(est_arr_time)) |> 
  filter(abs(arr_time -est_arr_time) <600) |> 
  ggplot() +
  aes(x = (arr_time -est_arr_time)%%60) +
  stat_density() +
  scale_x_continuous(breaks=seq(0, 60, 10))
```

:::

:::

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}

```

:::

:::


- Compare `dep_time`, `sched_dep_time`, and `dep_delay.` How would you expect those three numbers to be related?

::: {.content-visible when-profile="solution"} 

> We expect `dep_time == sched_dep_time + dep_delay %% 1440`

:::

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}

df |> 
  filter(!is.na(dep_time)) |> 
  mutate(est_dep_time = (sched_dep_time + dep_delay) %% 1440L) |> 
  ggplot() +
  aes(x=dep_time, y=est_dep_time) +
  geom_point(alpha=.1, size=.1) + 
  coord_fixed() 
```

:::

:::

::: {.content-visible when-profile="solution"} 

For most of the flights, the discrepancy between `dep_time` and the computed value is `0`. 

For `29` flights it is positive. The discrepancy is then exactly equal to `24` hours. 

:::


::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
df |> 
  filter(!is.na(dep_time)) |> 
  mutate(discr = dep_time - (sched_dep_time + dep_delay) %% 1440L) |> 
  filter(discr > 0) |> 
  select(dest, origin, carrier, distance, discr) |> 
  left_join(airports, by=c("dest"="faa")) |> 
  arrange(carrier, desc(distance), dest) |> 
  select(dest, origin, carrier, name, discr)
```

:::

:::


- Find the 10 most delayed flights using a ranking function. How do you want to handle ties? 

::: {callout-tip}

Carefully read the documentation for `min_rank()`.

[Windowed rank functions.]()

:::


::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  filter(dense_rank(-arr_delay) <=10) |> 
  arrange(desc(arr_delay)) |> 
  sample_n(10)
```

:::

:::



## Aggregations 


- Brainstorm at least 5 different ways to assess the typical delay characteristics of a group of flights. Consider the following scenarios:
  + A flight is 15 minutes early 50% of the time, and 15 minutes late 10% of the time.
  + A flight is always 10 minutes late.
  + A flight is 30 minutes early 50% of the time, and 30 minutes late 50% of the time.
  + 99% of the time a flight is on time. 1% of the time it’s 2 hours late.


::: {.content-visible when-profile="solution"}

::::: {.callout-note title="Solution"}


```{r}
flights_gp <- flights |> 
  group_by(flight, carrier, dest, origin) 
```


```{r}
flights_gp |> 
  summarize(q50 = quantile(arr_delay,.5, , na.rm=T), 
            q90 = quantile(arr_delay,.9, , na.rm=T),
            .groups="drop") |> 
  filter(q50<=-15, q90>=15) |> 
  head()
```

Another approach builds on experimental `reframe()`

```{r}
quantile_df <- function(x, probs = c(0.5, 0.9)) {
  tibble(
    val = quantile(x, probs, na.rm = TRUE),
    quant = probs
  )
}
```

```{r}
tmp <- flights_gp |> 
  reframe(q= quantile_df(arr_delay)) |> 
  unnest(cols=q)
```

`reframe()` generates a list-column (a column is tibble-valued). The result 
has to be *unnested*. 

```{r}
tmp |> 
  pivot_wider(
    id_cols=c(flight, carrier, dest, origin),
    names_from= quant,
    values_from= val,
    names_prefix="q"
  ) |> 
  head()
```


:::::

:::


```{r}
flights |> 
  group_by(dest) |> 
  summarise(n_cancelled = sum(is.na(dep_time)))

```
```{r}
flights_lite |> 
  group_by(dest) |> 
  summarise(n_cancelled = sum(is.na(dep_time))) |> 
  show_query()
```
  
::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  group_by(flight, carrier, dest, origin) |> 
  summarize(q = quantile(arr_delay,.5, na.rm=T), m=mean(arr_delay, na.rm=TRUE)) |> 
  filter((q < -15) | (q > 15)) |> 
  arrange(desc(m))
```

:::

::: {.callout-note title="Solution"}

```{r}
flights |> 
  group_by(jour=lubridate::wday(time_hour, label=T, abbr = F)) |> 
  summarise(n_cancelled=sum(is.na(dep_time)), n_tot=n())  |> 
  mutate(prop_cancelled = n_cancelled/n_tot)

?lubridate::wday
```

:::

:::


- Which is more important: arrival delay or departure delay?

::: {.content-visible when-profile="solution"} 

::: {.callout-note title="Solution"}

:::

:::

- Come up with another approach that will give you the same output as `not_cancelled |> count(dest)` and ` (without using `count()`).

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
not_cancelled |> 
  summarise(n_distinct(dest), n_distinct(tailnum))
```

:::

:::


- Our definition of cancelled flights `(is.na(dep_delay) | is.na(arr_delay) )` is slightly suboptimal. Why? Which is the most important column?

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  filter(xor(is.na(arr_delay), is.na(dep_delay))) |> 
  group_by(is.na(arr_delay), is.na(dep_delay)) |> 
  summarise(n())
```

:::

:::


- Look at the number of cancelled flights per day. Is there a pattern? Is the proportion of cancelled flights related to the average delay?

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  mutate(day_of_week=wday(time_hour, label=TRUE)) |> 
  group_by(day_of_week) |> 
  summarise(n_cancelled= sum(is.na(arr_delay)), n(), prop= n_cancelled/n()) |> 
  ggplot() +
  aes(x=day_of_week, y=prop) +
  geom_col(width=.5) +
  labs(title="Proportion of cancelled flights with respect to day of week") +
  xlab("Day of Week") +
  ylab("Proportion")
```

:::

:::


- Which carrier has the worst delays? 

Challenge: can you disentangle the effects of bad airports vs. bad carriers? Why/why not? (Hint: think about `flights |> group_by(carrier, dest) |> summarise(n())`)

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  filter(!is.na(arr_delay)) |> 
  group_by(carrier, dest) |> 
  summarise(m=mean(arr_delay), q9=quantile(arr_delay, (c(9)/10)), nn=n()) |> 
  ungroup() |> 
  filter(min_rank(-nn) <50) |> 
  ggplot() +
  aes(x=carrier, y=dest) +
  geom_point(aes(color=q9, size=nn)) +
  scale_color_viridis_c() +
  scale_size_area()
```

:::

:::



- What does the `sort` argument to `count()` do. When might you use it?

::: {.content-visible when-profile="solution"} 


::: {.callout-note title="Solution"}


:::

:::


## Miscellanea


- Which `carriers` serve all destination airports (in the table) ?

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  distinct(origin, dest) |> 
  mutate(tot_dest = n_distinct(dest)) |> 
  group_by(tot_dest, origin) |> 
  summarise(n_dest=n(), .groups="drop") |> 
  filter(n_dest==tot_dest) 
```

{{< fa hand-point-right >}} Verb `mutate()` handles function `n_distinct()` as a window function with trivial window. 

:::

:::


::: {.content-visible when-profile="solution"} 

::: {.callout-note}
There is  no need to perform grouping and aggregation to answer this question. Basic relational algebra is enough.  This operation is called *division* in SQL language

```{r}
R <- flights |>
    distinct(carrier, dest)

C <- R |> distinct(carrier) 
D <- R |> distinct(dest)

setdiff(C, crossing(C, D) |> 
           setdiff(R) |> 
           distinct(carrier))
```

Let $\mathcal{R}(A, B$ be the schema of some table $R$, then  
$$
R \div \pi_B(R) = \pi_A(R) \setminus \left(\pi_A \left(\pi_A(R) \times \pi_B(R) \setminus R \right)\right)
$$

More generally if $S$ has schema $\mathcal{S}(B)$
$$
R \div S = \pi_A(R) \setminus \left(\pi_A \left(\pi_A(R) \times \pi_B(S) \setminus R \right)\right)
$$

:::


:::


- Refer back to the lists of useful mutate and filtering functions. 
- Describe how each operation changes when you combine it with grouping.

::: {.content-visible when-profile="solution"} 

::: {.callout-note title="Solution"}

:::

:::

- Which plane (`tailnum`) has the worst on-time record amongst planes with at least ten flights?

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  filter(!is.na(arr_delay)) |> 
  group_by(tailnum) |> 
  summarise(m = mean(arr_delay), n_flights=n() ) |> 
  filter(n_flights > 10 ) |> 
  filter(min_rank(-m) == 1) |> 
  inner_join(distinct(flights, tailnum, carrier))
```

:::

:::

- What time of day should you fly if you want to avoid delays as much as possible?

::: {.content-visible when-profile="solution"} 

::: {.callout-note title="Solution"}

Definitely before 9a.m. 

```{r}
flights |> 
  filter(!is.na(arr_delay)) |> 
  group_by(hour) |> 
  summarise(m = mean(arr_delay, na.rm=T)) |> 
  arrange(m) |> 
  ggplot() + 
  aes(x=hour, y=m) +
  geom_col(color="black", fill="white", alpha=.2) +
  labs(title="Mean arrival delay as a function of departure hour",
       subtitle= "nycflights13 data")
```

:::

:::

- For each destination, compute the total minutes of delay. 

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |>
    filter(!is.na(arr_delay)) |>
    group_by(dest) |>
    summarise(m = sum(arr_delay, na.rm = T)) |> 
    arrange(desc(m)) |> 
    rename(faa=dest) |>
    dplyr::inner_join(airports)
```

:::

:::

- For each flight, compute the proportion of the total positive arrival delays for its destination.

::: {.content-visible when-profile="solution"} 

::: {.callout-note title="Solution"}

Would be easy with `ROLLUP (dest, flight)`
```{.sql}
WITH R AS (
  SELECT dest, flight, sum(arr_delay)
  FROM flights
  WHERE arr_delay >0
  GROUP BY ROLLUP(dest, flight)
)
SELECT r1.dest, r2.flight, r2.sum/r1.sum AS rap
FROM (SELECT dest, sum 
      FROM R WHERE flight IS NULL) r1 
      JOIN R r2 
      ON (r1.dest=r2.dest)
WHERE r2.flight IS NOT NULL AND r2.sum/r1.sum >.1
ORDER BY r1.dest, r2.flight ;
```

With `WINDOW` it is even easier

:::

:::


Using `dplyr`, it is easy. See [A second look at `group_by`](https://sebastiansauer.github.io/second_look_group_by/)

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
   dplyr::filter(arr_delay >0 ) |> 
   group_by(dest, flight) |> 
   summarise(total_delay_flight=sum(arr_delay)) |> # result is a grouped tibble
   mutate(total_delay_dest=sum(total_delay_flight), 
          delay_ratio= total_delay_flight/total_delay_dest)  |> 
  filter(dest %in% c('LAX', 'ATL'), delay_ratio > .02)   
```

:::

:::


::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

We have used the fact that the output of `summarise(., total_delay_flight=sum(arr_delay))`
is still a grouped dataframe/tibble (with grouping variable `dest`). At the following line, 
`mutate` performs aggregation with `sum()` in a groupwise manner, that is per group, and the 
result of the aggregation is appended to each row of the group, because we use `mutate` instead
of `summarize`. 

```{.sql}
WITH R AS (
  SELECT dest, 
         flight, 
         SUM(arr_delay)  AS  total_delay_per_flight
  FROM flights
WHERE arr_delay > 0 
GROUP BY dest, flight
) 
SELECT dest, flight, 
       total_delay_per_flight, 
       SUM(total_delay_per_flight) OVER w_per_dest AS     total_delay_per_dest 
FROM R
WINDOW w_per_dest AS (PARTITION BY dest) ;
```

:::

:::


- Delays are typically temporally correlated: even once the problem that caused the initial delay has been resolved, later flights are delayed to allow earlier flights to leave. Using `lag()`, explore how the delay of a flight is related to the delay of the immediately preceding flight.

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
    group_by(origin)  |> 
    arrange(year,month, day, sched_dep_time, .by_group=T) |>   # .by_group -> see documentation of arrange
    mutate(prev_delay=lag(dep_delay, n=1L), prev_origin=lag(origin, n=1L)) |> 
    slice_head(n=6L) |>    # inspect the result 
    select(origin, prev_origin, dep_delay, prev_delay, everything())
```

:::

:::


::: {.callout-note collapse="true"}

`lag()`  is an example of *window* function. If we were using `SQL`, we would define a `WINDOW`  using  an expression like 

```{.sql}
WINDOW w As (PARTITION BY origin ORDER BY year, month, day, sched_dep_time)
``` 

Something still needs fixing here: some flights never took off (`is.na(dep_time)`). Should they be sided out? assigned an infinite departure delay? 

:::


- Look at each destination. Can you find flights that are suspiciously fast? (i.e. flights that represent a potential data entry error). Compute the air time of a flight relative to the shortest flight to that destination. Which flights were most delayed in the air?

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
df <- flights |> 
    filter(!is.na(air_time), air_time > 0) |> 
    mutate(speed= (distance * 1.852)/ (air_time/60)) 
      
p1 <- df |> 
    ggplot() +
        aes(x=origin, y=speed) +
        geom_boxplot()

p2 <- df |> 
    ggplot() +
        aes(x=speed) +
        geom_histogram(color="black", fill="white", alpha=.2)


patchwork::wrap_plots(p1 + p2 )
```

:::

:::


::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
p2 + geom_rug(alpha=.5) +
    facet_zoom(xlim=c(900,1500))
```

:::

:::

Consider all flights with average speed above $950\text{km/h}$
as suspicious. 

Let us visualize destinations and origins of the speedy flights.

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
df |> 
    filter(speed>950) |> 
    mutate(dest=as_factor(dest)) |> 
    ggplot() +
        aes(x=fct_infreq(dest)) +
        geom_bar()
```

::: {.callout-note collapse="true"}
`SJU`, `BQN` are located in Puerto Rico. `LAX` is Los Angeles airport. `STT` is located in Virgin Islands. 
:::

:::

:::

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
df |> 
    filter(speed>950, ! dest %in% c('SJU', 'BQN')) |> 
    mutate(dest=as_factor(dest)) |> 
    ggplot() +
        aes(x=fct_infreq(dest), fill=origin) +
        geom_bar() +
        labs(x="Destination", 
        title="Distribution of speedy flights",
        subtitle="Excluding SJU and BQN")
```

:::

:::


- Find all destinations that are flown by at least two carriers. Use that information to rank the carriers.

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}
```{r}

```

:::

:::

- For each plane, count the number of flights before the first delay  greater than 1 hour.

::: {.callout-note collapse="true"}
Assume a plane is characterized by `tailnum`. Some flights have no `tailnum`. We ignore them. 
:::

::: {.content-visible when-profile="solution"}

::: {.callout-note title="Solution"}

```{r}
flights |> 
  filter(!is.na(tailnum)) |> 
  group_by(tailnum) |> 
  arrange(year, month, day, sched_dep_time, .bygroup=T) |> 
  mutate(rnk=row_number(), tot=n()) |> 
  filter(is.na(arr_time) | arr_delay >=60) |> 
  slice_head(n=1)  |> 
  mutate(rel_rnk = rnk/tot) |> 
  select(tailnum, rnk, tot,  rel_rnk, carrier) |> 
  arrange(desc(tot), desc(rel_rnk)) |> 
  ungroup() 

```

:::

:::

## References


- [Data transformation cheatsheet](https://rstudio.github.io/cheatsheets/html/data-transformation.html)
- [R4Data Science Tidy](https://r4ds.had.co.nz/tidy-data.html#tidy-data-1)
- [Benchmarking](https://h2oai.github.io/db-benchmark/)
- [`dplyr` and `vctrs`](https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-and-vctrs/)
- [Posts on `dplyr`](https://www.tidyverse.org/tags/dplyr/)
- [Window functions on `dplyr`](https://dplyr.tidyverse.org/articles/window-functions.html)


{{< video https://www.youtube.com/watch?v=Ue08LVuk790 >}}