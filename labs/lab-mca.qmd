---
date: "`r Sys.time()`"
title: "LAB: Multiple Correspondance Analysis (MCA)"


execute:
  echo: true
  eval: true
  collapse: true

format:
  html:
    output-file: lab-mca.html
  pdf:
    output-file: lab-mca.pdf


engine: knitr
---


```{r}
#| label: setup-packages
#| echo: true
#| collapse: true
#| message: false
#| warning: false
#| include: false

# We will use the following packages. 
# If needed, install them : pak::pkg_install(). 
stopifnot(
  require("testthat"),
  require("corrr"),
  require("magrittr"),
  require("lobstr"),
  require("sloop"),
  require("ggforce"),
  require("gt"),
  require("glue"),
  require("skimr"),
  require("patchwork"), 
  require("tidyverse"),
  require("ggfortify"),
  require("viridisLite")
  # require("autoplotly")
)
```

```{r}
#| label: setup-theme
#| message: false
#| warning: false
#| include: false
#| 
my_minimal_theme <- theme_minimal(
  base_size=9, 
  base_family = "Helvetica"
)

old_theme <- theme_set(
  my_minimal_theme               
  )

options(ggplot2.discrete.colour="viridis")
options(ggplot2.discrete.fill="viridis")
options(ggplot2.continuous.fill="viridis")
options(ggplot2.continuous.colour="viridis")
```


{{< include _preamble.qmd >}}



Besides the usual packages (`tidyverse`, ...),  we shall require 
`FactoMineR` and related packages.  

```{r}
#| message: false
#| warning: false
#| include: true
#| code-fold: true
#| 
stopifnot(
  require(FactoMineR),
  require(factoextra),
  require(FactoInvestigate)
)
```




## The `GSS`  dataset

We will use data coming from the General Social Survey. The General Social Survey data can be retrieved using the `gssr` package. If needed, install the `gssr` package and its companion package `gssrdoc`. 

```{r}
stopifnot(
  require("gssr"),
  require("gssrdoc")
)
```

The data we will use are panel data made available by the GSS. In order to explore them, it's very useful  toload `gss_dict` and `gss_panel_doc`. 

```{r}
data(gss_dict)
data(gss_panel_doc)
```

Check the online help. 

```{r}
?gss_panel_doc
```

 `gss_dict` and `gss_panel_doc` are dataframes that can be queried:

```{r}
gss_panel_doc |> 
  dplyr::sample_n(5) |> 
  select(id, text)  |> 
  gt::gt()
```

In the panel *questionnaire*, some questions have `race` in the field `id`.  Check again the online help. 

```{r}
#| eval: false
?race
```

The answer is something like that:

```
Question 24. What race do you consider yourself?
```

And it contains a brief summary of the answers given through the years.


| Year | Black  | Other | White | iap (NA) | Total| 
|-----:|-------:|------:|------:|-------:|-------:|
| 2010 |	311   |	183	  | 1550  |	     - |	 2044 |
| 2012 |  301	  | 196	  | 1477	|      - |	 1974 |
| 2014 |	386	  | 262   |	1890	|      - |	 2538 |

(this is just an excerpt)


```{r}
gss_panel_doc |> 
  filter(str_detect(id, "race")) |>
  slice_sample(n=1, by=text) |> 
  select(id, description, text) |> 
  gt::gt()
```

The data set we will use comes from year 2010 panel data.

```{r}
data("gss_panel10_long")

gss_panel10_long 
```

At the beginning, the panel was made of roughly 2000 respondents. And the respondents were interviewed in 2010, 2012 and 2014 (the three waves). 

```{r}
gss_panel10_long  |>  
  filter(wave==3, !is.na(id)) |>
  select(firstid, wave, id, sex)
```

Some respondents left the survey. Attrition can be monitored within the next query. 

```{r}
gss_panel10_long |> 
  select(wave, id) |>
  group_by(wave) |>
  summarize(observed = n_distinct(id),
            missing = sum(is.na(id)))
```


## The confidence topic

Do GSS surveys are made of a huge number of questions. Not all questions were asked to the respondents. Indeed, each question was asked to two thirds of the respondents. Questions were related to demographic features (Age, Sex, Level of education, Employment and so on). Answers to these questions can be used to determine whether the panel sample is representative. Data can be compared with last census data (there is a census every ten years in the US). 

A number of questions are related to the *confidence* topic. Respondents were asked about the level of confidence they put  in a wide array of institutions. 

```{r}
gss_panel_doc |> 
  filter(str_detect(text, "confidence")) |>
  slice_sample(n=1, by=text) |> 
  select(id, description, text) |> 
  gt::gt()
```

For institutions like *Science* or *Medicine*, or *Executive branch of federal government*, Respondents were asked whether they have: *Great deal of confidence*, *Only some confidence*, *Hardly any confidence* in the institution. 
The same Likert scale with 3 levels was used for all institutions. 

::: {.callout-note}

### Question

From the `gss_panel10_long` dataset, extract columns corresponding to questions from the *confidence topic*

:::

::::: {.content-visible when-profile="solution"}  


::: {.callout-tip title='Solution'} 
 
We first gather the `id` of the questions pertaining to the confidence topic.  

```{r}
#| label: confidence_ids
confidence_ids <- gss_panel_doc |> 
  filter(str_detect(text, "confidence")) |>
  slice_sample(n=1, by=text) |> 
  pull(id)
```

Then we protect the panel data on the questions pertaining to the confidence topic. We also keep the respondent key, sex, and the relevant wave. 
s
```{r}
gss_panel10_long |> 
  filter(wave==1) |>
  select(firstid, wave, id, sex, contains(confidence_ids)) |>
  sample_n(10) |>
  gt::gt()
```

Let us go back to the documentation. 

```{r}
#| label: confidence_ids_wave_1
gss_panel_doc |>
  filter(id %in% confidence_ids) |> 
  select(-ends_with("2"), -ends_with("3")) |>
  gt::gt()
```

Levels labels for answers to confidence questions are:

<!-- Missing-data codes are `0,8,9` -->

```{r}
foo <- gss_panel_doc |>
   filter(id %in% confidence_ids) |> 
   select(-ends_with("2"), -ends_with("3")) |> 
   unnest(
    cols=c(properties_1), names_repair = "universal") |> 
   unnest(
    cols=c(marginals_1), names_repair = "universal") |> 
   head(6) 


foo |> gt::gt()
```

- `IAP` stands for respondent was not asked the question.
- `DK` stands for *Don't Know*


> If respondents were not given the opportunity to provide a response to a question 
> because it was not included in the survey they were administered, then their responses are coded as “IAP.”

:::

:::::





```{r}
panel_doc <- gssrdoc::gss_panel_doc
```


## Table wrangling


Before proceeding to Multiple Correspondence  Analysis (CA), let us select the set of active variables.

::: {.callout-note  title="Question"}

Project `gss_panel10_long` on `firstid, wave, id, sex,`  and columns with names in 

```
  confinan conbus conclerg coneduc confed conlabor conpress conmedic contv conjudge consci conlegis conarmy
```

Filter so as to keep only wave `1`. 

Transform all relevant columns into factors. 

:::



::: {.content-visible when-profile='solution'} 
 
::: {.callout-tip title='Solution'} 


```{r}
#| label: confidence_panel10
#| 
confidence_panel10 <- gss_panel10_long |> 
  filter(wave==1) |>
  select(firstid, wave, id, sex, contains(confidence_ids)) |>
  mutate(across(starts_with("con"), as_factor)) |>
  mutate(sex=as_factor(sex))
```

```{r}
confidence_10 <- gss_panel_doc |>
   filter(id %in% confidence_ids) |> 
   select(-ends_with("2"), -ends_with("3")) |> 
   unnest(
    cols=c(properties_1), names_repair = "universal") |> 
   unnest(
    cols=c(marginals_1), names_repair = "universal") |>
   mutate(text=str_squish(text)) |>
   mutate(text= str_match(text, "\\? [\\w]\\.(.*)")) |> 
   mutate(text=text[,2]) |> 
   filter(property == "Missing-data codes") |>
   select(-starts_with("id"), -property, -`value...5`)

```

```{r}
levels_table <- confidence_10 |> 
  filter(label!='Total' | is.na(label)) |>
  distinct(`value...9`, label)

```


:::

:::


## Elementary statistics


::: {.callout-note  title="Question"}

Use `skimmr` to summarize your dataset. 

:::


::::: {.content-visible when-profile="solution"}  


::: {.callout-tip title='Solution'} 


```{r}
confidence_panel10 |>
  skimr::skim(where(is.factor)) |>
  select(-factor.ordered, -skim_type)|>
  filter(str_starts(skim_variable,"con")) |>
  gt::gt() |>
  gt::fmt_number(decimals=3) |>
  gt::tab_caption(
    caption = "GSS Panel data 2010 First wave, Topic confidence"
  )
```



```{r}
#| eval: false
#| 
confidence_panel10 |>
  filter(is.na(conarmy)) |>
  filter(is.na(conclerg)) |>
  filter(is.na(conpress))
```

:::
:::


::: {.callout-note  title="Question"}

There are a lot of missing data in your data set.

How are missing cells related? 

Drop rows with missing data in the confidence questions. 

What are the dimensions of your data set? 

:::


::::: {.content-visible when-profile="solution"}  


::: {.callout-tip title='Solution'} 

```{r}
confidence_data <- confidence_panel10 |> 
  mutate(across(starts_with("con"), .fns=\(x) !is.na(x), .names="not_{.col}_isna")) |>
  rowwise() |>
  filter(all(c_across(ends_with("isna")))) |> 
  ungroup() |> 
  select(-ends_with("isna"), -firstid, -wave, -econsci) |>
  mutate(across(starts_with("con"), fct_drop), sex=as_factor(sex))

confidence_data |> 
  slice_sample(n=10) |> 
  gt::gt()
```

:::

:::





::: {.callout-note title='Question'} 
 
In your explore possible associations between the answers to the different *confidence* questions?

How would you test possible independence between answer to *confidence in science* and *confidence in the Army*. 

:::

::: {.content-visible when-profile='solution'} 
 
::: {.callout-tip title='Solution'} 
 
 
TODO 

:::
:::



## The case for using MCA 

> In order to construct a *field of ideological and political attitudes*, which will subsequently
be used as a reference for locating the empirical typologies of response styles and survey
compliance, we apply *multiple correspondence analysis* (MCA). MCA belongs to the
family of techniques used in geometric data analysis (Le Roux and Rouanet 2004). It
allows for the extraction of the most important dimensions in a set of categorical variables,
and the graphical representation of variable categories and individuals relative to each
other in a coordinate system. Distances between categories as well as individuals can be
interpreted as a measure of (dis)similarity: If categories often co-appear in individual's
responses, they are located close together in the space produced by MCA. Rare co-appearances, 
accordingly, result in a larger distance between the respective categories.
Furthermore, *illustrative variables* can passively be projected into the field, a technique that
has been termed *visual regression analysis* (Lebart et al. 1984). Whereas the space is
determined by the distances between the categories of *active variables*, *passive variables*
do not alter the structure of the constructed field, but appear in their average and hence
most likely position.

From [https://doi.org/10.1007/s11135-016-0458-3](https://doi.org/10.1007/s11135-016-0458-3)


In this lab, we won't look at the field of ideological and political attitudes, but rather at the field of confidence level in a variety of institutions. 




## Multiple Correspondance Analysis


::: {.callout-important}

### MCA executive summary

The input of multiple correspondence analysis is a data frame $X$ with $n$ rows and $p$ categorical columns. Multiple Correspondence Analysis starts by building the *indicator matrix*. The indicator matrix is built by *one-hot encoding* of each categorical variable.


- A categorical variable $V_j$ (factor) with $q$ levels is mapped to $q$ $\{0,1\}$ -valued variables $V_{j,r}$ for $r \leq q$

- If levels are indexed by $\{1, \ldots, q\}$, if the value of the categorical variable $V_j$ from row $i$  is $k \in \{1, \ldots, q\}$, the bina$
$$k \mapsto \underbrace{0,\ldots, 0}_{k-1}, 1, \underbrace{0, \ldots, 0}_{q-k}$$

- The indicator matrix has as many rows as the data matrix

- The number of columns of the indicator matrix is the sum of the number of levels of the categorical variables/columns of the data matrix

- The indicator matrix is a numerical matrix. It is suitable for factorial methodss


Recall $X$ is the data matrix with $n$ rows (individuals) and $p$ categorical columns (variables)

For $j \in \{1, \ldots, p\}$, let $J_j$ denote the number of levels(categories) of variable $j$

Let $q = \sum_{j\leq p} J_j$ be the sum of the number of levels throughout the variables


Let $Z$ be the incidence matrix with $n$ rows and $q$ columns

For $j\leq p$ and $k \leq J_j$, let $\langle j, k\rangle = \sum_{j'<j} J_{j'}+k$

Let $N = n \times p = \sum_{i\leq n} \sum_{j \leq p} X_{i,j}$ and
$$P = \frac{1}{N} Z$$

(the _correspondence matrix_ for MCA)

{{< fa hand-point-right >}} The row wise  sums of correspondence matrix $P$ are all equal to $1/n=p/N$

The column wise sum of the correspondence matrix $P$ for the $k$th level of the $j$th variable of $X$ ( $j \leq p$ ) is
$$N_{\langle j,k\rangle}/N = f_{\langle j,k\rangle}/p$$

where $f_{\langle j,k\rangle}$ stands for the relative frequency of level $k$ of the $j$th variable

$$D_r = \frac{1}{n}\text{Id}_n\qquad D_c =\text{diag}\left(\frac{f_{\langle j,k\rangle}}{p}\right)_{j \leq p, k\leq J_j}$$

In MCA, we compute the SVD $U \times D \times V^T$ of the standardized residuals matrix:

$$S = D_r^{-1/2}\times \left(P - r\times c^T\right) \times D_c^{-1/2} = \sqrt{n}\left(P - r\times c^T\right) \times D_c^{-1/2}$$

Coefficient $i, \langle j, k\rangle$  of $S$ is
$$\frac{\mathbb{I}_{i, \langle j, k\rangle}- f_{\langle j,k\rangle}}{\sqrt{n f_{\langle j,k\rangle}/p}}$$
   
   



MCA consists in computing the SVD of the standardized residuals matrix $S =  U  \times D \times V^\top$

From the SVD, we get

- $D_r^{-1/2} \times U$ *standardized coordinates of rows*
- $D_c^{-1/2} \times V$ *standardized coordinates of columns*
- $D_r^{-1/2} \times U \times D$ *principal coordinates of rows*
- $D_c^{-1/2} \times V \times D$ *principal coordinates of columns*
- Squared singular values: the principal *inertia*


When calling `svd(.)`, the argument should be
$$D_r^{1/2}\times \left(D_r^{-1} \times P \times D_c^{-1}- \mathbf{I}\times \mathbf{I}^\top  \right)\times D_c^{1/2}= D_r^{-1/2}\times \left( P - r \times c^\top  \right)\times D_c^{-1/2}$$


:::


::: {.callout-important title="MCA and extended SVD"}

As

$$D_r^{-1} \times P \times D_c^{-1} - \mathbf{I}\mathbf{I}^\top = (D_r^{-1/2} \times U)\times D \times (D_c^{-1/2}\times V)^\top$$

$$(D_r^{-1/2} \times U)\times D \times (D_c^{-1/2}\times V)^\top$$ 

is the _extended SVD_ of

$$D_r^{-1} \times P \times D_c^{-1} - \mathbf{I}\mathbf{I}^\top$$

with respect to $D_r$ and $D_c$


:::


::: {.callout-note title="Question"}


Perform MCA on the indicator matrix. 

:::

::: {.callout-tip}

You may use `FactoMineR::MCA()`. It is interesting to compute the correspondence analysis in your own way, by preparing the matrix that is handled to `svd()` and returning 
a named list containing all relevant information. 

:::



::::: {.content-visible when-profile="solution"}  

::: {.callout-tip title='Solution'} 
 
 We lazyly rely on `FactoMineR::MCA`. 

```{r}
#| label: MCA
res.mca <- confidence_data |> 
  select(starts_with("con")) |> 
  FactoMineR::MCA(graph=F)
```

The result is an object of `S3` class `MCA`. 

:::
s
:::::


::: {.callout-note title="Question"}

If you did use `FactoMineR::MCA()`, explain the organization of the result.

:::



::::: {.content-visible when-profile="solution"}  

::: {.callout-tip title='Solution'} 
 
The result of `FactoMineR::MCA(...)` is a named and nested list with five elements:

`eig`
: a matrix/array containing enough information to build a screeplot.

`call`
: a list of 9, containing the call to `CA()`, an object of type `language`, telling (in principle) the user how `CA()` was called. However, this is a *quoted expression*. Here we need to guess the value of `y` in the calling environment understand what's going on. 


Element `call` also contains the table margin distributions `marge.col` and `marge.row`. The truncation rank `ncp` (number of components) can be assigned before computing the SVD (default value is 5). Element $X$ stores the contingency table that was effectively used for computing Correpondence Analysis. 

`ind`
: Information gathered from SVD to facilitate individulals (respndents)  analysis. 

`ind`
: a list structured in the same way as element `ind`. Used for variables/categories profiles analysis

`svd`
: a list of 3, just as the resuld of `svd()` containing the singular values, the left and right singular vectors of matrix $...$

:::

::: {.callout-tip title='Solution, output of  `print(res.mca)`'} 

   
|   | Name   |             Description                                          |
|:-:|:------------------------|:----------------------------------------------------|
|1  |   `$eig`                |"eigenvalues"                                        |
|2  |   `$var`                |"results for the variables (categories)"                          |
|3  |   `$var$coord`          |"coord. of the categories"                           |
|4  |   `$var$cos2`           |"cos2 for the categories"                           |
|5  |   `$var$contrib`        |"contributions of the categories"                    |
|6  |   `$var$v.test`         |"v-test for the categories"                          |
|7  |   `$ind`                |"results for the individuals"                        |
|8  |   `$ind$coord`          |"coord. for the individuals"                         |
|9  |   `$ind$cos2`          |"cos2 for the individuals"                          |
|10 |   `$ind$contrib`        |"contributions of the individuals"                   |
|11 |  `$quali.sup`          |"results for the supplementary categorical variables"|
|12 |  `$quali.sup$coord`    |"coord. for the supplementary categories"            |
|13 |  `$quali.sup$cos2`     |"cos2 for the supplementary categories"              |
|14 |  `$quali.sup$v.test`   |"v-test for the supplementary categories"            |
|15 |  `$call`               |"intermediate results"                               |
|16 |  `$call$marge.col`     |"weights of columns"                                 |
|17 |  `$call$marge.li`      |"weights of rows"                                    |



{{< fa exclamation-triangle >}}  `res.mca$svd` is not part of the output! 

- `eig` is computed from the singular values in `res.mca$svd`

- `var` contains material for plotting information about categories and variables on factorial planes

- `ind` conatins material for plotting information about individuals on on factorial planes


:::

::: {.callout-warning}

In principle, all relevant information can be gathered from components `svd`, `call.marge.li`, and `call.marge.col`. 

:::

:::::


## Screeplots


::: {.callout-note title="Question"}

Draw screeplots. Why are they useful? Comment briefly. 

:::



::::: {.content-visible when-profile='solution'} 
 
::: {.callout-tip title='Solution'} 
 
We first define a tidying function for preparing the screeplot. 
It is designed along the lines of method `tidy` for objects of class `prcomp`.
It consists in building a data frame from component `eig` of the `MCA` object.  

```{r}
#| label: tidy-scree
#| 
tidy_mca_scree <- function(res_mca){
  res_mca$eig |> 
    as_tibble(rownames="Dim") |>
    rename(
      `% Inertia` = `percentage of variance`,
      `Cumulative % Inertia` = `cumulative percentage of variance`
    ) |> 
    mutate(
      PC = as.integer(str_match(Dim, 'dim ([0-9]*)')[,2])
    )
}
```

We can now build a column plot. 

```{r}
#| label: tidy-scree-plot
res.mca |> 
  tidy_mca_scree() |>
  ggplot() +
  aes(x=PC, y=eigenvalue, label=glue("{round(`% Inertia`,2)} %")) +
  geom_col() +
  geom_text(angle=45, vjust=-1, hjust=-.1) 
```

Note that the share of cumulated inertia doesn't grow very fast with the number of components. Situation is different from what we met when performing Correspondence Analysis or Principal Component Analysis. This tells us that we will hqve to look beyond the first two axis. This is commonplace with multiple correspondence analysis. Look at the reference below where most of the interesting information can be found on the 3rd and 4th axis. 

::: 

:::::





## Individuals


::: {.callout-note title="Question"}

Perform Individual profiles analysis.

What are the classical plots? How can you build them from the output of `FactoMiner::MCA`? 

Build the table of row contributions (the so-called $\cos^2$)

:::

::::: {.content-visible when-profile="solution"}  

::: {.callout-tip title='Solution'} 

Attribute `ind` of objects of class `MCA` (exported from `FactoMineR`) is the starting point of any 
row profiles analysis. 

We design an augment method. For objects of class `MCA`. This is like what is done for objects of class `prcomp` and  different from what we did with objects of class `CA`. Indeed, `MCA` on the indicator matrix handles a sample just like `PCA` and not a contingency table like `CA`.  

```{r}
#| label: augment_mca
augment_mca <- function(res_mca, data=NULL){
  
  result <- res_mca$ind$coord |> 
    as_tibble()  
  
  if (!is.null(data)) {
    result <- result |>
      bind_cols(confidence_data)
      # inner_join(confidence_data, by=c("id")) 
  }
  
  return(result)
}
```


:::


::: {.callout-tip title='Solution'} 

Attribute `ind` is a named list made of $4$ components. 


`coord`
: a matrix with *named* rows and columns. The number of rows of `coord` matches the number of rows of the table fed to `MCA` (here, the number of respondents in the panel). The number of columns matches the rank of the truncated SVD that underlies Multiple Correspondance Analysis. Here it is the default truncation $5$.

> The principal coordinates are the principal coordinates of each individual in terms of the principal component. 

The columns of `coord` are pairwise orthogonal in the usual  inner product space.

Function `augment_mca` Bind the columns of `coord` with the columns of the original dataset.  

```{r}
res.mca |> 
#| label: augment_mca_glimpse
  augment_mca(confidence_data) |> 
  glimpse()
```

Note that, we can recover `ind$coord` from the left singular vectors and the singular values.

The output of `augment_mca` is the basis of the individual plots.  Individual plots are defined by picking a pair of principal axes. 
Him use the 3rd and the 4th axis, and we map the `sex` column from the original dataset  to the `fill` aesthetics.  

```{r}
#| label: augment_mca_plot
res.mca |> 
  augment_mca(confidence_data) |> 
  ggplot() +
  aes(x=`Dim 3`, y=`Dim 4`, fill=sex) +
  geom_point(alpha=.2, size=.2) +
  coord_fixed() +
  scale_fill_viridis_d()
```

:::



::: {.callout-tip title='Solution'} 
 
`cos2`
: Coefficients of matrix `cos2` are the share of row inertia from the corresponding cell in `coord`


```{r}
#| label: augment_mca_cos2_TODO

res.mca |> 
  augment_mca(confidence_data) |> 
  ggplot() +
  aes(x=`Dim 1`, y=`Dim 2`, fill=sex) +
  geom_point(alpha=.2, size=.2) +
  coord_fixed() +
  scale_fill_viridis_d()
```

:::

::: {.callout-tip title='Solution'} 
 
`contrib`
: 

Not too surprisingly, `coord`, `contrib`, and `cos2` share the same row names and column names.   


```{r}
#| label: augment_mca_contrib_TODO
```


:::



:::::


 






## Variables/Categories


::: {.callout-note title='Question'} 
 
Perform  column profiles (categories) analysis. You may use `factoextra::fviz_mca_var()`

:::


::::: {.content-visible when-profile="solution"}  

::: {.callout-tip title='Solution'} 

The `var` component. Of an MCA object is related with the right singular vectors of the residual matrix. 


```{r}
#| label: zooming_var_mca
p <- res.mca |> 
  factoextra::fviz_mca_var() +
  coord_fixed() 
  
p +
  facet_zoom(
    xy=`Dim 1`>=0 & `Dim 2`>=0,
    xlim=c(0,2),ylim=c(0,2))
```

Following what has been done for objects of class `prcomp`, we design  a `tidy_mca_var` function that turns the `var` component into a dataframe. Row names which correspond to categories, are  turned into a column we call `levels`. 

```{r}
#| label: tidy_mca_var
tidy_mca_var <- function(res_mca){
  res_mca$var$coord |> 
  as_tibble(rownames="levels")
}
```

A value in column `levels` indicate a variable., that is a topic (science, religion, army, ...) and a confidence level (A value on a Likert scale). We enrich the data frame by extracting the variable (`topic`) and the value (`sentiment`). 

We are then ready to plot an analog of the correlation circle. 

```{r}
#| label: tidy_mca_var_plotly_1_2
tidied_mca_var <- tidy_mca_var(res.mca) |>   
  mutate(sentiment=str_split(as.character(levels),'_')) |>
  mutate(topic=map_chr(sentiment, \(x)x[1]), sentiment=map_chr(sentiment, \(x)x[2])) 

p <- tidied_mca_var |> 
  ggplot() +
    aes(x=`Dim 1`, y=`Dim 2`, label=levels, fill=topic, shape=sentiment) +
    geom_point(alpha=.5, show.legend = F) +
    coord_fixed() +
    scale_color_viridis_d() +
    theme(legend.position="none") +
    labs(
      title = "MCA: Variables categories",
      subtitle = "Color: topic, Shape: confidence level",
      caption = "GSS data, panel 2010, wave 1"
    )

p |>
  plotly::ggplotly() 
```

Resorting to `plotly` allows us  to mitigate the overplotting effect. 

The plot on the first two axes seems  easy to interpret. As we move along the first axis from the left, we see growing confidence.  
On the positive part of the second axis, we have extreme confidence levels, either high or low. This suggests that individuals have trends:  either we trust all institutions; or none of them; or finally a little bit all of them. 

How could we comfort such a narrative?

```{r}
#| label: tidy_mca_var_plotly_3_4
(
 p + 
    aes(x=`Dim 3`, y=`Dim 4`, label=levels, color=sentiment) 
) |>   plotly::ggplotly() 
```



```{r}
#| label: tidy_mca_var_plotly_4_5
(
  p +
    aes(x=`Dim 4`, y=`Dim 5`, label=levels) 
) |>  plotly::ggplotly() 
```


:::

:::::





## Symmetric plots 

::: {.callout-note title="Question"}

Build the symmetric plots (biplots)  for multiple correspondence analysis.


:::




::::: {.content-visible when-profile="solution"}  

::: {.content-visible when-profile='solution'} 
 
### From the shelf 

We resort to `factoextra`. In principle, the biplot can be constructed  from the `coord` matrices  in the `var` and the `ind` components of the  `MCA` object.  

```{r}
#| eval: false
#| label: biplot

p <- res.mca |> 
  factoextra::fviz_mca_biplot(
    label= "var",
    alpha.ind=.5
#    repel =T
  )

p |>  plotly::ggplotly()
```

:::


::: {.callout-tip title='Solution'} 

### {{< fa jedi >}}

```{r}
#| label: TODO-biplot-jedi
```

:::

:::::





## Mosaicplots


MCA can be complemented by  Mosaicplots, Double Decker plots,  Chi-square tests, and  Correspondence analyses between pair of variables. 

::: {.callout-note title="Question"}

Draw a mosaic plot to visualize association between confidence levesl in Science and confidence level in Medicine. 

:::





::::: {.content-visible when-profile="solution"}  

::: {.callout-tip title='Solution'} 
 
```{r}
confidence_data |> 
  select(consci, conmedic) |>
  table() |> 
  mosaicplot(color=T)
```

```{r}
confidence_data |> 
  select(consci, conmedic) |> 
  table() |>
  chisq.test() |> 
  broom::glance() |> 
  gt::gt() |> 
  gt::tab_caption("Chi2 independence test for Confidence in Science and Confidence in Medicine")
```


```{r}
confidence_data |> 
  select(consci, conclerg) |> 
  table() |>
  chisq.test() |> 
  broom::glance() |> 
  gt::gt() |> 
  gt::tab_caption("Chi2 independence test for Confidence in Science and Confidence in Clergy")
```


```{r}
t_sex_clerg_sci <- confidence_data |> 
  select(sex, conclerg, consci) |> 
  table()
  
t_sex_clerg_sci  |>
  vcd::doubledecker( )
```

```{r}
t_sex_clerg_sci |> 
  mosaicplot(color=T, main="Confidence in Clergy and Science")
```

:::

:::::


## Further references 


Barth, Alice and Schmitz, Andreas. 2018. *Response quality and ideological dispositions: an integrative approach using geometric and classifying techniques*. Quality & Quantity

> When analyzing survey data, response quality has consequential implications for substantial conclusions. Differences in response quality are usually explained by personality, or socio-demographic or cognitive characteristics. Little, however, is known about how respondents’ political attitudes, values, and opinions impact on quality aspects. This is a striking analytical omission, as potential associations between political values and various forms of response biases and artefacts call into question surveys’ ability to represent ‘public opinion’. In this contribution, response quality is traced back to respondents’ political and ideological dispositions. For this purpose, a relational understanding of response quality is applied that takes into account different aspects of response behaviors, as well as the interrelations between these indicators. Using data from the US General Social Survey (2010–2014), an empirical typology of response quality is created via finite mixture analysis. The resulting classes are then related to positions in the US field of ideological dispositions constructed via multiple correspondence analysis. The analyses reveal that there are (1) different combinations of response patterns and thus different empirical response types, and (2) that these types of response quality systematically vary with regard to the respondents’ political and ideological (dis)positions. Implications of the findings for public opinion surveys are discussed.


